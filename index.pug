- var link = 'ml5-image-classifier'
- var title = 'ml5.js 開發神經網路圖像辨識'
- var description = '本文介紹如何使用 Vue.js 結合 ml5.js 和 File API 創建圖像識別應用。探索從基本設置到解決常見問題的詳細步驟，並查看實際的示例 Demo。'

<!DOCTYPE html>
html(lang="zh-Hant")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    meta(http-equiv="X-UA-Compatible", content="ie=edge")
    title #{title} - August - Let's Write

    link(rel="canonical", href=`https://www.letswrite.tw/${link}/`)
    meta(property="og:url", content=`https://letswritetw.github.io/letswrite-${link}/`)

    //- meta(property="fb:app_id", content="911000986339138")
    meta(property="og:type", content="website")

    meta(property="og:site_name", content="Let's Write")
    meta(property="og:title", content=`${title} - Augustus - Let's Write`)
    meta(itemprop="name", content=`${title} - Augustus - Let's Write`)

    meta(name="description", content=description)
    meta(property="og:description", content=description)
    meta(itemprop="description", content=description)

    meta(itemprop="image", content=`https://letswritetw.github.io/letswrite-${link}/fb.jpg?v=20240123`)
    meta(property="og:image", content=`https://letswritetw.github.io/letswrite-${link}/fb.jpg?v=20240123`)
    meta(property="og:image:width", content="1200")
    meta(property="og:image:height", content="630")
    meta(property="og:image:alt", content=title)

    link(rel="shortcut icon", href="https://letswritetw.github.io/letswritetw/dist/img/logo_512.png")

    //- css
    script(src="https://cdn.tailwindcss.com")
    script.
      tailwind.config = {
        theme: {
          extend: {
            colors: {
              main: '#42A6F7',
              mainHover: '#167FFF'
            }
          }
        }
      }
    
    style.
      /* loading mask */
      .loading-box {
        position: fixed;
        top: 0;
        left: 0;
        display: flex;
        justify-content: center;
        align-content: center;
        flex-wrap: wrap;
        width: 100%;
        height: 100%;
        background: #333;
        transition: opacity .4s ease;
      }
      .loading-box.fade {
        opacity: 0;
      }
      .loading-box .text {
        padding-top: 16px;
        width: 100%;
        letter-spacing: 1px;
        text-align: center;
        color: rgba(255, 255, 255, .87)
      }

      @keyframes loading {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }
      .loading {
        width: 100px;
        height: 100px;
        user-select: none;
        border-radius: 50%;
        box-shadow: #b8d721 0px 1px 1px, #6fbd23 0.5px 0.866px 1px, #44a559 0.866px 0.5px 1px, #3d76b7 1px 0px 1px, #9f57ef 0.866px -0.5px 1px, #fb69c8 0.5px -0.866px 1px, #ff90c7 0px -1px 1px, #ffa481 -0.5px -0.866px 1px, #ff9c5b -0.866px -0.5px 1px, #ffcc6c -1px 0px 1px, #f6cb26 -0.866px 0.5px 1px, #fff019 -0.5px 0.866px 1px;
        filter: saturate(400%) contrast(0.9);
        animation: loading 0.46s linear infinite;
      }

      label {
        margin-bottom: 32px;
        padding: 8px 24px;
      }

      .js-append-links a {
        color: rgba(255, 255, 255, .6) !important;
      }

    // Google Tag Manager
    script.
      (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
      new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
      j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
      'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
      })(window,document,'script','dataLayer','GTM-PGQ9WQT');
  body.bg-neutral-800.text-white

    // Google Tag Manager (noscript)
    noscript
      iframe(src="https://www.googletagmanager.com/ns.html?id=GTM-PGQ9WQT", height="0", width="0", style="display:none;visibility:hidden")
    
    #app.container.mx-auto.p-8

      section.loading-box.z-10(:class="{ 'fade': ready }")
        .loading
        .text ml5.js loading

      .text-center
        h1.mb-4.font-bold.text-4xl=title
        p 筆記文：
          a(class="text-main hover:text-mainHover", href=`https://www.letswrite.tw/${link}/`) Let's Write
      
      hr.my-8.mx-auto.max-w-3xl.border-t.border-gray-500.border-dashed

      section.mx-auto.mb-14.max-w-48
        input#customFileInput.hidden(type="file", @change="aiPredict", accept="image/*")
        label(for="customFileInput", class="flex justify-center items-center bg-white rounded-full cursor-pointer")
          img.icon(src="upload.svg", alt="上傳檔案")
          span.inline-block.ml-2.text-xl.text-neutral-700 選擇圖檔
      
      section.relative.mx-auto.flex.w-96.flex-col.rounded-xl.bg-white.bg-clip-border.text-gray-700.shadow-md(v-show="!!results")
        .relative.mx-4.-mt-6.overflow-hidden.rounded-xl.bg-blue-gray-500.bg-clip-border.text-white.shadow-lg(class='shadow-blue-gray-500/40')
          img(:src="imgSrc", ref="img")
        .p-6
          h5.mb-2.block.font-sans.text-xl.font-semibold.leading-snug.tracking-normal.text-blue-gray-900.antialiased 辨識結果
          ul.block.font-sans.text-base.font-light.leading-relaxed.text-inherit.antialiased
            li(v-for="r in results")
              strong {{ r.label }}：
              span {{ (r.confidence * 100).toFixed() }}%

      hr.my-8.mx-auto.max-w-3xl.border-t.border-gray-500.border-dashed

    script(src="https://cdnjs.cloudflare.com/ajax/libs/vue/3.4.15/vue.global.prod.min.js")
    script(src="https://unpkg.com/ml5@latest/dist/ml5.min.js")
    script.
      const { createApp, markRaw } = Vue;
      const App = {
        data() {
          return {
            classifier: null, // 圖像識別模型
            ready: false, // AI 準備好了沒
            imgSrc: null, // 上傳的圖檔
            results: null // AI 預測結果
          }
        },
        methods: {
          // 載入圖像識別模型的 callback
          aiReady() {
            this.ready = true;
            setTimeout(() => {
              document.querySelector('.loading-box').remove()
            }, 250);
          },

          // 上傳圖片後執行判斷
          aiPredict(e) {

            // 抓上傳的圖檔
            this.imgSrc = URL.createObjectURL(e.target.files[0]);
            const imageElement = this.$refs.img;

            // 圖片讀取完，再讓AI判斷
            imageElement.addEventListener('load', e => {
              this.classifier.classify(imageElement, (err, results) => {
                if (err) {
                  console.error(err);
                  return;
                }
                this.results = results;
              });
            });

          }
        },
        mounted() {
          // 載入圖像識別模型：MobileNet, Darknet, Darknet-tiny, DoodleNet
          const classifier = ml5.imageClassifier('MobileNet', this.aiReady);
          this.classifier = markRaw(classifier);
        }
      }
      
      createApp(App).mount('#app');
